from utils.data_utils import Radar_Datasetfrom Configuration.environment_config import environmentimport torchimport scipy.ioimport randomimport torch.nn.functional as Fmin_SNR = 5max_SNR = 20valid_size = 2200  # Number of valid samples, 20% of training settrain_size = 8800  # Number of train samples, 80% of training setdata_size = train_size + valid_size# file_name = 'Matlab_train_data/' + str(SNR) + '_SNR_training_samples.mat'file_path = 'L:/6311_Users/Noam/Radar Simulation for ViterbiNet/Data from MatLab to Python/Generate Data/Multiple targets/'file_name = f'single_target{min_SNR}-{max_SNR}SNR_{data_size}training_samples_V.mat'mat = scipy.io.loadmat(file_path + file_name)num_range_bins = environment.num_range_binsnum_doppler_bins = environment.num_doppler_binsrange_label = torch.zeros(data_size)doppler_label = torch.zeros(data_size)data = torch.zeros((data_size, 1, num_range_bins, num_doppler_bins))for i in range(data_size):    x = mat['data'][0][i]    label = mat['labels'][0][i][0]    range_label[i] = label[1]    doppler_label[i] = label[0]    x = torch.tensor(x)    x = F.log_softmax(x.reshape(num_range_bins * num_doppler_bins, ), dim=0).view(num_range_bins, num_doppler_bins)    data[i, 0, :, :] = x# generate random samples indexesindices = random.sample(range(data_size), data_size)# split indexes for train and validtrain_idx = indices[:train_size]valid_idx = indices[train_size:]train_data = Radar_Dataset(data[train_idx], range_label[train_idx], doppler_label[train_idx], environment=environment)valid_data = Radar_Dataset(data[valid_idx], range_label[valid_idx], doppler_label[valid_idx], environment=environment)torch.save(train_data, f'{min_SNR}-{max_SNR}_SNR_train_data')torch.save(valid_data, f'{min_SNR}-{max_SNR}_SNR_valid_data')